# Task ID: 11
# Title: Implement Universal Clinical Scales Modal System for MindHub
# Status: pending
# Dependencies: 4, 3
# Priority: medium
# Description: Create a centralized modal-based system to manage and present 100+ clinical assessment scales with unified architecture, supporting both self-administered and professional-administered modes, with centralized result storage and migration of existing scales.
# Details:
Build a universal modal component architecture that serves as the foundation for all clinical scales across MindHub. Create a flexible configuration system where each scale is defined through JSON/database configuration including: questions array with response types (Likert, multiple choice, text, numeric), scoring algorithms, interpretation rules, and normative data. Implement a unified patient selection flow that appears before any scale administration, allowing selection of existing patients or quick registration of new ones. Design the modal system with three main phases: 1) Patient selection/registration, 2) Administration mode selection (self-administered with tokenized links or professional-administered), 3) Scale presentation with progress tracking. Create a centralized results storage system in Firestore with standardized schema for all scale responses, timestamps, patient IDs, administrator IDs, and calculated scores. Implement automatic score calculation based on scale configuration, with support for complex scoring rules, subscales, and percentile calculations. Build a migration system to transition existing scales (AQ-Adolescent, PHQ-9, PAS) to the new universal format, preserving all functionality while standardizing the interface. Create a scale registry/catalog system where all available scales are indexed with metadata (name, description, age range, administration time, clinical domains). Implement responsive modal design optimized for tablets with large touch targets, clear typography, and progress indicators. Add support for conditional logic in scales (skip patterns, branching questions). Create an API layer for scale operations: getScale(), submitResponse(), calculateScore(), getInterpretation(). Implement real-time validation and required field checking. Add support for scale administration sessions that can be paused and resumed. Create audit logging for all scale administrations with full response history.

# Test Strategy:
Create comprehensive unit tests for the scale configuration parser and validator. Test scoring algorithms with known test cases for each migrated scale (AQ-Adolescent, PHQ-9, PAS) to ensure scores match original implementations. Implement integration tests for the complete flow: patient selection → scale loading → response submission → score calculation → result storage. Create mock scale configurations to test edge cases: scales with 200+ questions, complex branching logic, multiple scoring dimensions. Test modal responsiveness across different screen sizes and orientations. Validate accessibility with screen readers and keyboard navigation. Performance test with concurrent scale administrations to ensure system handles 50+ simultaneous users. Test the migration system by comparing results between old and new implementations for historical data. Implement automated tests for scale registry CRUD operations. Test session persistence across network interruptions and browser refreshes. Validate tokenized link generation and expiration for self-administered modes. Create end-to-end tests simulating real clinical workflows with different user roles.
