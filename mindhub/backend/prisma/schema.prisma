generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String                            @id @default(cuid())
  auth0Id                        String?                           @unique
  email                          String                            @unique
  password                       String?                           // For simple auth
  name                           String?
  picture                        String?
  organizationId                 String?
  organization                   Organization?                     @relation(fields: [organizationId], references: [id])
  accountType                    AccountType                       @default(INDIVIDUAL)
  isActive                       Boolean                           @default(true)
  isBetaUser                     Boolean                           @default(true)
  createdAt                      DateTime                          @default(now())
  updatedAt                      DateTime                          @updatedAt
  lastLoginAt                    DateTime?
  createdTokens                  AssessmentToken[]
  cashBreakdowns                 CashCutProfessionalBreakdown[]    @relation("ProfessionalCashBreakdowns")
  closedCashCuts                 CashRegisterCut[]                 @relation("ClosedCashCuts")
  createdCashCuts                CashRegisterCut[]                 @relation("CreatedCashCuts")
  patientConsultations           Consultation[]
  createdExpenses                Expense[]                         @relation("UserExpenses")
  financeConfigs                 FinanceConfiguration[]            @relation("UserFinanceConfigs")
  financialGoals                 FinancialGoal[]                   @relation("UserGoals")
  professionalIncomes            Income[]                          @relation("ProfessionalIncomes")
  uploadedDocuments              PatientDocument[]                 @relation("UploadedDocuments")
  assignedPatientTags            PatientTagAssignment[]            @relation("AssignedPatientTags")
  removedPatientTags             PatientTagAssignment[]            @relation("RemovedPatientTags")
  createdPatientTags             PatientTag[]                      @relation("CreatedPatientTags")
  createdPatients                Patient[]
  contracts                      ProfessionalContract[]            @relation("ProfessionalContracts")
  messageTemplatesCreated        RemoteAssessmentMessageTemplate[] @relation("MessageTemplateCreator")
  remoteAssessmentsAdministrator RemoteAssessment[]                @relation("RemoteAssessmentAdministrator")
  remoteAssessmentsCreator       RemoteAssessment[]                @relation("RemoteAssessmentCreator")
  sentDistributions              ResourcePatientDistribution[]     @relation("SentByUser")
  createdResources               Resource[]                        @relation("UserResources")
  administeredScales             ScaleAdministration[]
  userRoles                      UserRole[]
  storageQuota                   UserStorageQuota?
  clinimetrixAssessments         ClinimetrixAssessment[]

  @@map("users")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  resource        String
  action          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId], map: "user_roles_roleId_fkey")
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "role_permissions_permissionId_fkey")
  @@map("role_permissions")
}

model Patient {
  id                      String                        @id
  firstName               String
  lastName                String
  paternalLastName        String?
  maternalLastName        String?
  dateOfBirth             DateTime
  gender                  String
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  postalCode              String?
  curp                    String?                       @unique
  rfc                     String?
  bloodType               String?
  allergies               String?
  emergencyContact        String?
  emergencyContactName    String?
  emergencyContactPhone   String?
  consentToTreatment      Boolean                       @default(true)
  consentToDataProcessing Boolean                       @default(true)
  isActive                Boolean                       @default(true)
  createdBy               String?
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  clinicId                String?                       @db.VarChar(255)
  assessmentTokens        AssessmentToken[]
  consultations           Consultation[]
  incomes                 Income[]
  medicalHistory          MedicalHistory[]
  patientDiscounts        PatientDiscount[]
  documents               PatientDocument[]
  patientServices         PatientService[]
  tagAssignments          PatientTagAssignment[]        @relation("PatientTagAssignments")
  creator                 User?                         @relation(fields: [createdBy], references: [id])
  prescriptions           Prescription[]
  remoteAssessments       RemoteAssessment[]            @relation("RemoteAssessmentPatient")
  resourceDistributions   ResourcePatientDistribution[]
  scaleAdministrations    ScaleAdministration[]
  clinimetrixAssessments  ClinimetrixAssessment[]
  waitingListEntries      WaitingList[]

  @@index([createdBy], map: "patients_createdBy_fkey")
  @@map("patients")
}

model Consultation {
  id               String   @id @default(cuid())
  patientId        String
  consultantId     String
  consultationDate DateTime
  reason           String?  @db.Text
  notes            String?  @db.LongText
  diagnosis        String?  @db.Text
  treatmentPlan    String?  @db.Text
  status           String   @default("scheduled")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  consultant       User     @relation(fields: [consultantId], references: [id])
  patient          Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  incomes          Income[]

  @@index([consultantId], map: "consultations_consultantId_fkey")
  @@index([patientId], map: "consultations_patientId_fkey")
  @@map("consultations")
}

model MedicalHistory {
  id          String    @id @default(cuid())
  patientId   String
  condition   String
  diagnosedAt DateTime?
  status      String    @default("active")
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId], map: "medical_history_patientId_fkey")
  @@map("medical_history")
}

model Prescription {
  id           String     @id @default(cuid())
  patientId    String
  medicationId String
  dosage       String
  frequency    String
  startDate    DateTime
  endDate      DateTime?
  status       String     @default("active")
  prescribedBy String
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  medication   Medication @relation(fields: [medicationId], references: [id])
  patient      Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([medicationId], map: "prescriptions_medicationId_fkey")
  @@index([patientId], map: "prescriptions_patientId_fkey")
  @@map("prescriptions")
}

model Medication {
  id            String         @id @default(cuid())
  name          String
  genericName   String?
  category      String
  dosageForm    String
  strength      String?
  manufacturer  String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  prescriptions Prescription[]

  @@map("medications")
}

model Scale {
  id                       String                    @id
  name                     String
  abbreviation             String                    @unique
  version                  String?                   @default("1.0")
  category                 String
  subcategory              String?
  description              String?                   @db.Text
  author                   String?
  publicationYear          Int?                      @map("publication_year")
  estimatedDurationMinutes Int?                      @map("estimated_duration_minutes")
  administrationMode       String?                   @map("administration_mode")
  targetPopulation         String?                   @map("target_population") @db.Text
  totalItems               Int                       @map("total_items")
  scoringMethod            String?                   @map("scoring_method")
  scoreRangeMin            Int?                      @map("score_range_min")
  scoreRangeMax            Int?                      @map("score_range_max")
  instructionsProfessional String?                   @map("instructions_professional") @db.Text
  instructionsPatient      String?                   @map("instructions_patient") @db.Text
  isActive                 Boolean                   @default(true) @map("is_active")
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  tags                     Json?
  assessmentTokens         AssessmentToken[]         @relation("ScaleTokens")
  remoteAssessments        RemoteAssessment[]        @relation("RemoteAssessmentScale")
  scaleAdministrations     ScaleAdministration[]     @relation("ScaleAdministrations")
  scale_documentation      ScaleDocumentation[]
  interpretationRules      ScaleInterpretationRule[]
  items                    ScaleItem[]
  responseOptions          ScaleResponseOption[]
  subscales                ScaleSubscale[]
  user_favorite_scales     user_favorite_scales[]

  @@map("scales")
}

model ScaleItem {
  id                          String                    @id
  scaleId                     String                    @map("scale_id")
  itemNumber                  Int                       @map("item_number")
  itemText                    String?                   @map("item_text") @db.Text
  itemCode                    String?                   @map("item_code")
  subscale                    String?
  responseGroup               String?                   @map("response_group")
  reverseScored               Boolean                   @default(false) @map("reverse_scored")
  isActive                    Boolean                   @default(true) @map("is_active")
  createdAt                   DateTime                  @default(now()) @map("created_at")
  updatedAt                   DateTime                  @updatedAt @map("updated_at")
  question_type               String?                   @default("likert")
  alert_trigger               Boolean?                  @default(false)
  alert_condition             String?
  help_text                   String?                   @db.Text
  required                    Boolean?                  @default(true)
  metadata                    Json?
  itemResponses               ItemResponse[]
  scale_item_specific_options ScaleItemSpecificOption[]
  scale                       Scale                     @relation(fields: [scaleId], references: [id], onDelete: Cascade)

  @@unique([scaleId, itemNumber])
  @@index([scaleId, responseGroup], map: "idx_scale_items_response_group")
  @@map("scale_items")
}

model ScaleResponseOption {
  id            String   @id
  scaleId       String   @map("scale_id")
  responseGroup String?  @map("response_group")
  optionValue   String   @map("option_value")
  optionLabel   String   @map("option_label")
  scoreValue    Int      @map("score_value")
  displayOrder  Int      @default(0) @map("display_order")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  option_type   String?  @default("standard")
  metadata      Json?
  scale         Scale    @relation(fields: [scaleId], references: [id], onDelete: Cascade)

  @@index([scaleId], map: "scale_response_options_scale_id_fkey")
  @@index([scaleId, responseGroup], map: "idx_scale_response_options_group")
  @@map("scale_response_options")
}

model ScaleInterpretationRule {
  id                  String   @id
  scaleId             String   @map("scale_id")
  minScore            Int      @map("min_score")
  maxScore            Int      @map("max_score")
  severityLevel       String   @map("severity_level")
  interpretationLabel String   @map("interpretation_label")
  colorCode           String?  @map("color_code")
  description         String?  @db.Text
  recommendations     String?  @db.Text
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  scale               Scale    @relation(fields: [scaleId], references: [id], onDelete: Cascade)

  @@index([scaleId], map: "scale_interpretation_rules_scale_id_fkey")
  @@map("scale_interpretation_rules")
}

model ScaleSubscale {
  id                         String               @id
  scaleId                    String               @map("scale_id")
  subscaleName               String               @map("subscale_name")
  subscaleCode               String?              @map("subscale_code")
  minScore                   Int                  @default(0) @map("min_score")
  maxScore                   Int?                 @map("max_score")
  description                String?              @db.Text
  isActive                   Boolean              @default(true) @map("is_active")
  createdAt                  DateTime             @default(now()) @map("created_at")
  updatedAt                  DateTime             @updatedAt @map("updated_at")
  items                      Json?
  referencias_bibliograficas String?              @db.Text
  indice_cronbach            Decimal?             @db.Decimal(3, 2)
  subscaleScores             ScaleSubscaleScore[]
  scale                      Scale                @relation(fields: [scaleId], references: [id], onDelete: Cascade)

  @@index([scaleId], map: "scale_subscales_scale_id_fkey")
  @@map("scale_subscales")
}

model ScaleItemSpecificOption {
  id           String    @id
  itemId       String    @map("item_id")
  optionValue  String    @map("option_value")
  optionLabel  String    @map("option_label") @db.Text
  scoreValue   Int       @map("score_value")
  displayOrder Int       @default(0) @map("display_order")
  isActive     Boolean   @default(true) @map("is_active")
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  scale_items  ScaleItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "scale_item_specific_options_ibfk_1")

  @@index([isActive], map: "idx_item_specific_options_active")
  @@index([itemId], map: "idx_item_specific_options_item_id")
  @@index([displayOrder], map: "idx_item_specific_options_order")
  @@map("scale_item_specific_options")
}

model ScaleDocumentation {
  id                        String   @id
  scaleId                   String   @map("scale_id")
  bibliography              String?  @db.Text
  sources_consulted         Json?
  implementation_notes      String?  @db.Text
  psychometric_properties   Json?
  clinical_considerations   String?  @db.Text
  special_items_notes       Json?
  version_notes             String?  @db.Text
  target_population_details String?  @db.Text
  clinical_interpretation   String?  @db.Text
  createdAt                 DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt                 DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
  scales                    Scale    @relation(fields: [scaleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "scale_documentation_ibfk_1")

  @@index([createdAt], map: "idx_created_at")
  @@index([scaleId], map: "idx_scale_id")
  @@map("scale_documentation")
}

model ScaleAdministration {
  id                 String               @id @default(cuid())
  patientId          String
  scaleId            String
  administratorId    String
  administrationDate DateTime             @default(now())
  administrationType String
  status             String               @default("completed")
  totalScore         Float?
  rawScore           Float?
  percentileScore    Float?
  tScore             Float?
  zScore             Float?
  severity           String?
  interpretation     String?
  notes              String?
  completionTime     Int?
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  responses          ItemResponse[]
  administrator      User                 @relation(fields: [administratorId], references: [id])
  patient            Patient              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  scale              Scale                @relation("ScaleAdministrations", fields: [scaleId], references: [id])
  subscaleScores     ScaleSubscaleScore[]

  @@index([administratorId], map: "scale_administrations_administratorId_fkey")
  @@index([patientId], map: "scale_administrations_patientId_fkey")
  @@index([scaleId], map: "scale_administrations_scaleId_fkey")
  @@map("scale_administrations")
}

model ItemResponse {
  id               String              @id @default(cuid())
  administrationId String
  scaleItemId      String
  responseValue    String
  responseText     String?
  score            Float?
  wasSkipped       Boolean             @default(false)
  responseTime     Int?
  createdAt        DateTime            @default(now())
  administration   ScaleAdministration @relation(fields: [administrationId], references: [id], onDelete: Cascade)
  scaleItem        ScaleItem           @relation(fields: [scaleItemId], references: [id])

  @@unique([administrationId, scaleItemId])
  @@index([scaleItemId], map: "item_responses_scaleItemId_fkey")
  @@map("item_responses")
}

model AssessmentToken {
  id        String    @id @default(cuid())
  token     String    @unique
  patientId String
  scaleId   String
  createdBy String
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  creator   User      @relation(fields: [createdBy], references: [id])
  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  scale     Scale     @relation("ScaleTokens", fields: [scaleId], references: [id])

  @@index([createdBy], map: "assessment_tokens_createdBy_fkey")
  @@index([patientId], map: "assessment_tokens_patientId_fkey")
  @@index([scaleId], map: "assessment_tokens_scaleId_fkey")
  @@map("assessment_tokens")
}

model FormTemplate {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String?
  schema        String
  isActive      Boolean        @default(true)
  version       String         @default("1.0")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  formInstances FormInstance[]

  @@map("form_templates")
}

model FormInstance {
  id          String       @id @default(cuid())
  templateId  String
  name        String
  data        String
  status      String       @default("draft")
  submittedAt DateTime?
  submittedBy String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  template    FormTemplate @relation(fields: [templateId], references: [id])

  @@index([templateId], map: "form_instances_templateId_fkey")
  @@map("form_instances")
}

model ResourceCategory {
  id                 String                     @id @default(cuid())
  name               String
  slug               String                     @unique
  description        String?
  isActive           Boolean                    @default(true)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  resourceCategories ResourceCategoryRelation[]

  @@map("resource_categories")
}

model ResourceTag {
  id           String                @id @default(cuid())
  name         String                @unique
  color        String?
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  resourceTags ResourceTagRelation[]

  @@map("resource_tags")
}

model RemoteAssessment {
  id              String                      @id @default(uuid())
  token           String                      @unique
  scaleId         String
  patientId       String
  administratorId String
  createdAt       DateTime                    @default(now())
  expiresAt       DateTime
  accessedAt      DateTime?
  completedAt     DateTime?
  status          RemoteAssessmentStatus      @default(pending)
  patientEmail    String?
  patientPhone    String?
  customMessage   String?                     @db.Text
  privacyNoticeId String?
  expirationDays  Int                         @default(7)
  reminderEnabled Boolean                     @default(true)
  reminderSentAt  DateTime?
  reminderCount   Int                         @default(0)
  deliveryMethod  DeliveryMethod              @default(copy_link)
  createdBy       String
  updatedAt       DateTime                    @updatedAt
  accessLogs      RemoteAssessmentAccessLog[]
  progress        RemoteAssessmentProgress?
  administrator   User                        @relation("RemoteAssessmentAdministrator", fields: [administratorId], references: [id])
  creator         User                        @relation("RemoteAssessmentCreator", fields: [createdBy], references: [id])
  patient         Patient                     @relation("RemoteAssessmentPatient", fields: [patientId], references: [id])
  scale           Scale                       @relation("RemoteAssessmentScale", fields: [scaleId], references: [id])

  @@index([token])
  @@index([patientId])
  @@index([administratorId])
  @@index([status])
  @@index([expiresAt])
  @@index([createdBy], map: "remote_assessments_createdBy_fkey")
  @@index([scaleId], map: "remote_assessments_scaleId_fkey")
  @@map("remote_assessments")
}

model RemoteAssessmentAccessLog {
  id                 String           @id @default(uuid())
  remoteAssessmentId String
  accessedAt         DateTime         @default(now())
  ipAddress          String?
  userAgent          String?          @db.Text
  deviceType         DeviceType       @default(unknown)
  browser            String?
  operatingSystem    String?
  countryCode        String?
  city               String?
  action             AccessAction     @default(view)
  metadata           Json?
  remoteAssessment   RemoteAssessment @relation(fields: [remoteAssessmentId], references: [id], onDelete: Cascade)

  @@index([remoteAssessmentId])
  @@index([accessedAt])
  @@map("remote_assessment_access_log")
}

model RemoteAssessmentProgress {
  id                 String           @id @default(uuid())
  remoteAssessmentId String           @unique
  responses          Json
  currentItemIndex   Int              @default(0)
  totalItems         Int
  percentageComplete Decimal          @default(0.00) @db.Decimal(5, 2)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  remoteAssessment   RemoteAssessment @relation(fields: [remoteAssessmentId], references: [id], onDelete: Cascade)

  @@map("remote_assessment_progress")
}

model RemoteAssessmentMessageTemplate {
  id              String                  @id @default(uuid())
  name            String
  category        MessageTemplateCategory @default(custom)
  messageTemplate String                  @db.Text
  createdBy       String
  isActive        Boolean                 @default(true)
  createdAt       DateTime                @default(now())
  creator         User                    @relation("MessageTemplateCreator", fields: [createdBy], references: [id])

  @@index([category])
  @@index([createdBy])
  @@map("remote_assessment_message_templates")
}

model Resource {
  id                 String                        @id @default(cuid())
  title              String
  slug               String?                       @unique
  content            String?
  excerpt            String?
  type               String                        @default("article")
  url                String?
  filePath           String?
  fileName           String?
  fileSize           Int?
  mimeType           String?
  metadata           Json?
  status             String                        @default("draft")
  featuredAt         DateTime?
  publishedAt        DateTime?
  lastAccessedAt     DateTime?
  createdById        String?
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
  resourceCategories ResourceCategoryRelation[]
  distributions      ResourcePatientDistribution[]
  resourceTags       ResourceTagRelation[]
  creator            User?                         @relation("UserResources", fields: [createdById], references: [id])

  @@index([createdById], map: "resources_createdById_fkey")
  @@map("resources")
}

model ResourceCategoryRelation {
  id         String           @id @default(cuid())
  resourceId String
  categoryId String
  category   ResourceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  resource   Resource         @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([resourceId, categoryId])
  @@index([categoryId], map: "resource_category_relations_categoryId_fkey")
  @@map("resource_category_relations")
}

model ResourceTagRelation {
  id         String      @id @default(cuid())
  resourceId String
  tagId      String
  resource   Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag        ResourceTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([resourceId, tagId])
  @@index([tagId], map: "resource_tag_relations_tagId_fkey")
  @@map("resource_tag_relations")
}

model ClinicConfiguration {
  id            String   @id @default(cuid())
  configuration Json
  createdBy     String?
  updatedBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("clinic_configurations")
}

model UserStorageQuota {
  id               String   @id @default(cuid())
  userId           String   @unique
  planType         String   @default("basic")
  maxStorageBytes  BigInt
  usedStorageBytes BigInt   @default(0)
  lastCleanupDate  DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_storage_quota")
}

model Income {
  id                 String        @id @default(cuid())
  amount             Decimal       @db.Decimal(10, 2)
  source             String
  paymentMethod      String
  currency           String        @default("MXN")
  patientId          String?
  consultationId     String?
  professionalId     String?
  description        String?
  concept            String?
  notes              String?
  reference          String?
  status             String        @default("confirmed")
  receivedDate       DateTime      @default(now())
  dueDate            DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  discountAmount     Decimal?      @db.Decimal(10, 2)
  originalAmount     Decimal?      @db.Decimal(10, 2)
  serviceId          String?
  clinicAmount       Decimal?      @db.Decimal(10, 2)
  commissionRate     Decimal?      @db.Decimal(5, 2)
  discountPercentage Decimal?      @db.Decimal(5, 2)
  isCourtesy         Boolean       @default(false)
  professionalAmount Decimal?      @db.Decimal(10, 2)
  consultation       Consultation? @relation(fields: [consultationId], references: [id])
  patient            Patient?      @relation(fields: [patientId], references: [id])
  professional       User?         @relation("ProfessionalIncomes", fields: [professionalId], references: [id])
  service            Service?      @relation("ServiceIncomes", fields: [serviceId], references: [id])

  @@index([consultationId], map: "incomes_consultationId_fkey")
  @@index([patientId], map: "incomes_patientId_fkey")
  @@index([professionalId], map: "incomes_professionalId_fkey")
  @@index([serviceId], map: "incomes_serviceId_fkey")
  @@map("incomes")
}

model Expense {
  id            String    @id @default(cuid())
  amount        Decimal   @db.Decimal(10, 2)
  category      String
  paymentMethod String
  currency      String    @default("MXN")
  vendor        String?
  description   String
  notes         String?
  reference     String?
  status        String    @default("confirmed")
  expenseDate   DateTime  @default(now())
  dueDate       DateTime?
  createdBy     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  creator       User?     @relation("UserExpenses", fields: [createdBy], references: [id])

  @@index([createdBy], map: "expenses_createdBy_fkey")
  @@map("expenses")
}

model FinancialGoal {
  id            String    @id @default(cuid())
  title         String
  description   String?
  targetAmount  Decimal   @db.Decimal(10, 2)
  currentAmount Decimal   @default(0.00) @db.Decimal(10, 2)
  currency      String    @default("MXN")
  category      String
  targetDate    DateTime?
  status        String    @default("active")
  createdBy     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  creator       User?     @relation("UserGoals", fields: [createdBy], references: [id])

  @@index([createdBy], map: "financial_goals_createdBy_fkey")
  @@map("financial_goals")
}

model FinanceConfiguration {
  id              String         @id @default(cuid())
  clinicId        String?
  isAutomatic     Boolean        @default(false)
  defaultCurrency String         @default("MXN")
  taxRate         Decimal?       @db.Decimal(5, 2)
  invoicePrefix   String?
  invoiceCounter  Int            @default(1)
  paymentTerms    String?
  notes           String?
  isActive        Boolean        @default(true)
  createdBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  discountPlans   DiscountPlan[]
  creator         User?          @relation("UserFinanceConfigs", fields: [createdBy], references: [id])
  services        Service[]

  @@index([createdBy], map: "finance_configurations_createdBy_fkey")
  @@map("finance_configurations")
}

model Service {
  id              String               @id @default(cuid())
  configId        String
  name            String
  description     String?
  code            String?
  basePrice       Decimal              @db.Decimal(10, 2)
  currency        String               @default("MXN")
  duration        Int?
  category        String
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  incomes         Income[]             @relation("ServiceIncomes")
  patientServices PatientService[]
  configuration   FinanceConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId], map: "services_configId_fkey")
  @@map("services")
}

model DiscountPlan {
  id               String               @id @default(cuid())
  configId         String
  name             String
  description      String?
  discountType     String
  discountValue    Decimal              @db.Decimal(10, 2)
  currency         String               @default("MXN")
  isActive         Boolean              @default(true)
  validUntil       DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  configuration    FinanceConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  patientDiscounts PatientDiscount[]

  @@index([configId], map: "discount_plans_configId_fkey")
  @@map("discount_plans")
}

model PatientService {
  id          String   @id @default(cuid())
  patientId   String
  serviceId   String
  customPrice Decimal? @db.Decimal(10, 2)
  notes       String?
  isActive    Boolean  @default(true)
  assignedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([patientId, serviceId])
  @@index([serviceId], map: "patient_services_serviceId_fkey")
  @@map("patient_services")
}

model PatientDiscount {
  id             String       @id @default(cuid())
  patientId      String
  discountPlanId String
  customValue    Decimal?     @db.Decimal(10, 2)
  notes          String?
  isActive       Boolean      @default(true)
  assignedAt     DateTime     @default(now())
  validUntil     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  discountPlan   DiscountPlan @relation(fields: [discountPlanId], references: [id], onDelete: Cascade)
  patient        Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, discountPlanId])
  @@index([discountPlanId], map: "patient_discounts_discountPlanId_fkey")
  @@map("patient_discounts")
}

model ProfessionalContract {
  id             String    @id @default(cuid())
  professionalId String
  clinicId       String?
  contractType   String
  commissionRate Decimal?  @db.Decimal(5, 2)
  fixedAmount    Decimal?  @db.Decimal(10, 2)
  hourlyRate     Decimal?  @db.Decimal(10, 2)
  monthlyRate    Decimal?  @db.Decimal(10, 2)
  isActive       Boolean   @default(true)
  startDate      DateTime  @default(now())
  endDate        DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  professional   User      @relation("ProfessionalContracts", fields: [professionalId], references: [id])

  @@index([professionalId], map: "professional_contracts_professionalId_fkey")
  @@map("professional_contracts")
}

model CashRegisterCut {
  id                    String                         @id @default(cuid())
  cutNumber             Int
  cutType               String
  startDate             DateTime
  endDate               DateTime
  totalIncome           Decimal                        @db.Decimal(10, 2)
  totalDiscounts        Decimal                        @default(0.00) @db.Decimal(10, 2)
  totalCourtesies       Decimal                        @default(0.00) @db.Decimal(10, 2)
  netIncome             Decimal                        @db.Decimal(10, 2)
  status                String                         @default("open")
  notes                 String?
  createdBy             String
  closedBy              String?
  closedAt              DateTime?
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt
  paymentBreakdown      CashCutPaymentBreakdown[]
  professionalBreakdown CashCutProfessionalBreakdown[]
  closer                User?                          @relation("ClosedCashCuts", fields: [closedBy], references: [id])
  creator               User                           @relation("CreatedCashCuts", fields: [createdBy], references: [id])

  @@index([closedBy], map: "cash_register_cuts_closedBy_fkey")
  @@index([createdBy], map: "cash_register_cuts_createdBy_fkey")
  @@map("cash_register_cuts")
}

model CashCutPaymentBreakdown {
  id               String          @id @default(cuid())
  cashCutId        String
  paymentMethod    String
  amount           Decimal         @db.Decimal(10, 2)
  transactionCount Int             @default(0)
  cashCut          CashRegisterCut @relation(fields: [cashCutId], references: [id], onDelete: Cascade)

  @@unique([cashCutId, paymentMethod])
  @@map("cash_cut_payment_breakdown")
}

model CashCutProfessionalBreakdown {
  id                 String          @id @default(cuid())
  cashCutId          String
  professionalId     String
  totalIncome        Decimal         @db.Decimal(10, 2)
  professionalAmount Decimal         @db.Decimal(10, 2)
  clinicAmount       Decimal         @db.Decimal(10, 2)
  commissionRate     Decimal         @db.Decimal(5, 2)
  serviceCount       Int             @default(0)
  cashCut            CashRegisterCut @relation(fields: [cashCutId], references: [id], onDelete: Cascade)
  professional       User            @relation("ProfessionalCashBreakdowns", fields: [professionalId], references: [id])

  @@unique([cashCutId, professionalId])
  @@index([professionalId], map: "cash_cut_professional_breakdown_professionalId_fkey")
  @@map("cash_cut_professional_breakdown")
}

model ResourcePatientDistribution {
  id         String    @id @default(cuid())
  resourceId String
  patientId  String
  sentVia    String    @default("expedix")
  sentDate   DateTime  @default(now())
  viewedDate DateTime?
  message    String?
  sentById   String
  patient    Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  resource   Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  sentBy     User      @relation("SentByUser", fields: [sentById], references: [id])

  @@index([patientId], map: "resource_patient_distribution_patientId_fkey")
  @@index([resourceId], map: "resource_patient_distribution_resourceId_fkey")
  @@index([sentById], map: "resource_patient_distribution_sentById_fkey")
  @@map("resource_patient_distribution")
}

model PatientDocument {
  id           String    @id @default(cuid())
  patientId    String
  title        String
  type         String    @default("resource")
  filePath     String
  fileName     String?
  fileSize     Int?
  mimeType     String?
  metadata     Json?
  isEncrypted  Boolean   @default(false)
  uploadedById String
  viewedAt     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  patient      Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  uploadedBy   User      @relation("UploadedDocuments", fields: [uploadedById], references: [id])

  @@index([patientId], map: "patient_documents_patientId_fkey")
  @@index([uploadedById], map: "patient_documents_uploadedById_fkey")
  @@map("patient_documents")
}

model PatientTag {
  id                    String                 @id @default(cuid())
  name                  String
  color                 String
  textColor             String?
  category              String
  icon                  String?
  description           String?
  isSystemTag           Boolean                @default(false)
  isCustom              Boolean                @default(true)
  isActive              Boolean                @default(true)
  createdBy             String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  patientTagAssignments PatientTagAssignment[]
  creator               User?                  @relation("CreatedPatientTags", fields: [createdBy], references: [id])

  @@unique([name, category])
  @@index([createdBy], map: "patient_tags_createdBy_fkey")
  @@map("patient_tags")
}

model PatientTagAssignment {
  id             String     @id @default(cuid())
  patientId      String
  tagId          String
  assignedBy     String?
  assignedAt     DateTime   @default(now())
  isActive       Boolean    @default(true)
  reason         String?
  removedBy      String?
  removedAt      DateTime?
  removalReason  String?
  assignedByUser User?      @relation("AssignedPatientTags", fields: [assignedBy], references: [id])
  patient        Patient    @relation("PatientTagAssignments", fields: [patientId], references: [id], onDelete: Cascade)
  removedByUser  User?      @relation("RemovedPatientTags", fields: [removedBy], references: [id])
  tag            PatientTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([patientId, tagId])
  @@index([assignedBy], map: "patient_tag_assignments_assignedBy_fkey")
  @@index([removedBy], map: "patient_tag_assignments_removedBy_fkey")
  @@index([tagId], map: "patient_tag_assignments_tagId_fkey")
  @@map("patient_tag_assignments")
}

model ScheduleConfiguration {
  id                         String   @id @default(cuid())
  userId                     String   @unique
  workingHoursStart          String
  workingHoursEnd            String
  lunchBreakEnabled          Boolean  @default(false)
  lunchBreakStart            String?
  lunchBreakEnd              String?
  workingDays                Json
  defaultAppointmentDuration Int      @default(60)
  consultationTypes          Json
  blockedDates               Json     @default(dbgenerated("(json_array())"))
  maxDailyAppointments       Int      @default(20)
  bufferTime                 Int      @default(0)
  reminders                  Json
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @default(now()) @updatedAt

  @@map("schedule_configurations")
}

model WaitingList {
  id              String    @id @default(cuid())
  patientId       String
  appointmentType String
  preferredDates  Json
  preferredTimes  Json
  priority        String    @default("media")
  notes           String?   @db.Text
  status          String    @default("waiting")
  contactAttempts Int       @default(0)
  lastContactDate DateTime?
  scheduledDate   DateTime?
  createdBy       String    @default("user-dr-alejandro")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  patient         Patient   @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([status])
  @@index([priority])
  @@map("waiting_list")
}

model appointment_behavioral_logs {
  id             String                                 @id
  appointment_id String?
  patient_id     String
  event_type     appointment_behavioral_logs_event_type
  description    String?                                @db.Text
  delay_minutes  Int?
  recorded_by    String
  recorded_at    DateTime                               @default(now()) @db.DateTime(0)
  created_at     DateTime                               @default(now()) @db.DateTime(0)
  updated_at     DateTime                               @default(now()) @db.DateTime(0)

  @@index([appointment_id], map: "idx_appointment_id")
  @@index([event_type], map: "idx_event_type")
  @@index([patient_id], map: "idx_patient_id")
  @@index([recorded_at], map: "idx_recorded_at")
}

model appointment_changes {
  id                      String                          @id
  original_appointment_id String
  patient_id              String
  change_type             appointment_changes_change_type
  reason                  String?                         @db.Text
  advance_notice_hours    Int?
  requested_new_date      DateTime?                       @db.DateTime(0)
  recorded_by             String
  change_date             DateTime                        @default(now()) @db.DateTime(0)
  created_at              DateTime                        @default(now()) @db.DateTime(0)
  updated_at              DateTime                        @default(now()) @db.DateTime(0)

  @@index([change_date], map: "idx_change_date")
  @@index([change_type], map: "idx_change_type")
  @@index([original_appointment_id], map: "idx_original_appointment")
  @@index([patient_id], map: "idx_patient_id")
}

model appointment_logs {
  id             String   @id @db.VarChar(255)
  appointment_id String?  @db.VarChar(255)
  patient_id     String   @db.VarChar(255)
  user_id        String   @db.VarChar(255)
  user_name      String   @db.VarChar(255)
  action         String   @db.VarChar(50)
  previous_data  String?  @db.Text
  new_data       String?  @db.Text
  changes        String?  @db.Text
  reason         String?  @db.Text
  created_at     DateTime @default(now()) @db.DateTime(0)

  @@index([action], map: "idx_action")
  @@index([appointment_id], map: "idx_appointment_id")
  @@index([created_at], map: "idx_created_at")
  @@index([patient_id], map: "idx_patient_id")
  @@index([user_id], map: "idx_user_id")
}

model patient_alerts {
  id              String    @id @db.VarChar(255)
  patient_id      String    @db.VarChar(255)
  type            String    @db.VarChar(100)
  severity        String    @db.VarChar(20)
  message         String    @db.Text
  metadata        String?   @db.Text
  is_active       Boolean   @default(true)
  acknowledged_by String?   @db.VarChar(255)
  acknowledged_at DateTime? @db.DateTime(0)
  created_at      DateTime  @default(now()) @db.DateTime(0)

  @@index([created_at], map: "idx_created_at")
  @@index([is_active], map: "idx_is_active")
  @@index([patient_id], map: "idx_patient_id")
  @@index([severity], map: "idx_severity")
  @@index([type], map: "idx_type")
}

model patient_communications {
  id                 String                                    @id
  patient_id         String
  communication_type patient_communications_communication_type
  direction          patient_communications_direction
  content            String?                                   @db.Text
  duration           Int?
  recorded_by        String
  communication_date DateTime                                  @default(now()) @db.DateTime(0)
  created_at         DateTime                                  @default(now()) @db.DateTime(0)
  updated_at         DateTime                                  @default(now()) @db.DateTime(0)

  @@index([communication_date], map: "idx_communication_date")
  @@index([communication_type], map: "idx_communication_type")
  @@index([direction], map: "idx_direction")
  @@index([patient_id], map: "idx_patient_id")
}

model user_favorite_scales {
  id         String   @id
  user_id    String
  scale_id   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  scales     Scale    @relation(fields: [scale_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_favorite_scales_ibfk_1")

  @@unique([user_id, scale_id], map: "unique_user_scale")
  @@index([scale_id], map: "idx_scale_favorites")
  @@index([user_id], map: "idx_user_favorites")
}

model ScaleResponseGroup {
  id           String   @id @default(cuid())
  scaleId      String   @map("scale_id")
  groupKey     String   @map("group_key")
  name         String
  description  String?  @db.Text
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([scaleId, groupKey], map: "uk_scale_group")
  @@index([scaleId], map: "idx_scale_response_groups_scale")
  @@map("scale_response_groups")
}

model ScaleSubscaleScore {
  id               String              @id @default(cuid())
  administrationId String              @map("administration_id")
  subscaleId       String              @map("subscale_id")
  subscaleName     String              @map("subscale_name")
  score            Float
  rawScore         Float?              @map("raw_score")
  percentileScore  Float?              @map("percentile_score")
  tScore           Float?              @map("t_score")
  interpretation   String?
  severity         String?
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  administration   ScaleAdministration @relation(fields: [administrationId], references: [id], onDelete: Cascade)
  subscale         ScaleSubscale       @relation(fields: [subscaleId], references: [id])

  @@unique([administrationId, subscaleId])
  @@index([administrationId], map: "idx_subscale_scores_administration")
  @@index([subscaleId], map: "idx_subscale_scores_subscale")
  @@map("scale_subscale_scores")
}

model form_analytics {
  id           Int       @id @default(autoincrement())
  form_id      String    @db.VarChar(100)
  metric_name  String    @db.VarChar(100)
  metric_value Decimal   @db.Decimal(10, 2)
  period_start DateTime  @db.Date
  period_end   DateTime  @db.Date
  created_at   DateTime? @default(now()) @db.Timestamp(0)

  @@index([form_id], map: "idx_form_id")
  @@index([metric_name], map: "idx_metric_name")
  @@index([period_start, period_end], map: "idx_period")
}

model form_assignments {
  id                    String                   @id @db.VarChar(100)
  form_id               String                   @db.VarChar(100)
  patient_id            String                   @db.VarChar(36)
  token                 String                   @unique(map: "token") @db.VarChar(128)
  assigned_by           String                   @db.VarChar(36)
  assigned_at           DateTime?                @default(now()) @db.Timestamp(0)
  expires_at            DateTime                 @db.Timestamp(0)
  status                form_assignments_status? @default(pending)
  message               String?                  @db.Text
  reminders_sent        Int?                     @default(0)
  max_reminders         Int?                     @default(3)
  completion_percentage Int?                     @default(0)
  completed_at          DateTime?                @db.Timestamp(0)
  reminder_schedule     Json?

  @@index([assigned_at], map: "idx_assigned_at")
  @@index([expires_at], map: "idx_expires_at")
  @@index([form_id], map: "idx_form_id")
  @@index([patient_id], map: "idx_patient_id")
  @@index([status], map: "idx_status")
  @@index([token], map: "idx_token")
}

model form_categories {
  id          String    @id @db.VarChar(36)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  icon        String?   @db.VarChar(100)
  color       String?   @db.VarChar(7)
  sort_order  Int?      @default(0)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
}

model form_submissions {
  id                      String    @id @db.VarChar(100)
  assignment_id           String    @db.VarChar(100)
  form_id                 String    @db.VarChar(100)
  patient_id              String    @db.VarChar(36)
  responses               Json
  submitted_at            DateTime? @default(now()) @db.Timestamp(0)
  submission_time_seconds Int?
  completion_percentage   Int?      @default(100)
  ip_address              String?   @db.VarChar(45)
  user_agent              String?   @db.Text
  signature_data          String?   @db.Text

  @@index([assignment_id], map: "idx_assignment_id")
  @@index([form_id], map: "idx_form_id")
  @@index([patient_id], map: "idx_patient_id")
  @@index([submitted_at], map: "idx_submitted_at")
}

model forms {
  id           String    @id @db.VarChar(100)
  title        String    @db.VarChar(500)
  description  String?   @db.Text
  structure    Json
  settings     Json?
  category     String?   @db.VarChar(100)
  created_by   String    @db.VarChar(36)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  is_active    Boolean?  @default(true)
  version      Int?      @default(1)
  usage_count  Int?      @default(0)
  last_used_at DateTime? @db.Timestamp(0)

  @@index([is_active], map: "idx_active")
  @@index([category], map: "idx_category")
  @@index([created_at], map: "idx_created_at")
  @@index([created_by], map: "idx_created_by")
}

model resource_access_logs {
  id               String                      @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  resource_send_id String                      @db.VarChar(36)
  accessed_at      DateTime?                   @default(now()) @db.Timestamp(0)
  ip_address       String?                     @db.VarChar(45)
  user_agent       String?                     @db.Text
  action           resource_access_logs_action
  resource_sends   resource_sends              @relation(fields: [resource_send_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "resource_access_logs_ibfk_1")

  @@index([accessed_at], map: "idx_accessed")
  @@index([resource_send_id], map: "idx_send")
}

model resource_collections {
  id          String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id     String    @db.VarChar(36)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  is_public   Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)

  @@index([user_id], map: "idx_user")
}

model resource_email_templates {
  id             String           @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id        String           @db.VarChar(36)
  name           String           @db.VarChar(255)
  subject        String           @db.VarChar(500)
  body_html      String           @db.Text
  body_text      String?          @db.Text
  is_default     Boolean?         @default(false)
  created_at     DateTime?        @default(now()) @db.Timestamp(0)
  updated_at     DateTime?        @default(now()) @db.Timestamp(0)
  resource_sends resource_sends[]

  @@index([user_id], map: "idx_user")
}

model resource_sends {
  id                       String                          @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  resource_id              String                          @db.VarChar(36)
  patient_id               String                          @db.VarChar(36)
  sent_by                  String                          @db.VarChar(36)
  sent_at                  DateTime?                       @default(now()) @db.Timestamp(0)
  send_method              resource_sends_send_method
  email_template_id        String?                         @db.VarChar(36)
  watermark_applied        Boolean?                        @default(false)
  watermark_template_id    String?                         @db.VarChar(36)
  customizations_json      Json?
  delivery_status          resource_sends_delivery_status? @default(sent)
  delivered_at             DateTime?                       @db.Timestamp(0)
  viewed_at                DateTime?                       @db.Timestamp(0)
  download_count           Int?                            @default(0)
  notes                    String?                         @db.Text
  resource_access_logs     resource_access_logs[]
  resource_email_templates resource_email_templates?       @relation(fields: [email_template_id], references: [id], onUpdate: NoAction, map: "resource_sends_ibfk_1")
  watermark_templates      watermark_templates?            @relation(fields: [watermark_template_id], references: [id], onUpdate: NoAction, map: "resource_sends_ibfk_2")

  @@index([email_template_id], map: "email_template_id")
  @@index([patient_id], map: "idx_patient")
  @@index([resource_id], map: "idx_resource")
  @@index([sent_at], map: "idx_sent_date")
  @@index([delivery_status], map: "idx_status")
  @@index([watermark_template_id], map: "watermark_template_id")
}

model watermark_templates {
  id             String                        @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  user_id        String                        @db.VarChar(36)
  name           String                        @db.VarChar(255)
  type           watermark_templates_type
  logo_path      String?                       @db.VarChar(500)
  text_content   String?                       @db.VarChar(500)
  position       watermark_templates_position? @default(bottom_right)
  opacity        Decimal?                      @default(0.50) @db.Decimal(3, 2)
  font_size      Int?                          @default(12)
  font_color     String?                       @default("#000000") @db.VarChar(7)
  settings_json  Json?
  is_default     Boolean?                      @default(false)
  created_at     DateTime?                     @default(now()) @db.Timestamp(0)
  updated_at     DateTime?                     @default(now()) @db.Timestamp(0)
  resource_sends resource_sends[]

  @@index([user_id, is_default], map: "idx_user_default")
}

enum RemoteAssessmentStatus {
  pending
  accessed
  in_progress
  completed
  expired
}

enum DeliveryMethod {
  email
  sms
  whatsapp
  copy_link
}

enum DeviceType {
  mobile
  tablet
  desktop
  unknown
}

enum AccessAction {
  view
  start
  save_progress
  complete
  expire
}

enum MessageTemplateCategory {
  followup
  initial
  pre_appointment
  post_appointment
  custom
}

enum patient_communications_communication_type {
  phone_call
  whatsapp
  email
  in_person
}

enum appointment_behavioral_logs_event_type {
  late_arrival
  no_show
  cancelled_last_minute
  early_arrival
  communication_issue
  payment_delay
}

enum appointment_changes_change_type {
  reschedule
  cancellation
  no_show
}

enum patient_communications_direction {
  incoming
  outgoing
}

enum watermark_templates_type {
  text
  image
  combined
}

enum resource_access_logs_action {
  view
  download
  print
}

enum resource_sends_send_method {
  email
  download
  patient_portal @map("patient-portal")
}

enum watermark_templates_position {
  top_left      @map("top-left")
  top_center    @map("top-center")
  top_right     @map("top-right")
  center
  bottom_left   @map("bottom-left")
  bottom_center @map("bottom-center")
  bottom_right  @map("bottom-right")
}

enum form_assignments_status {
  pending
  in_progress
  completed
  expired
}

enum resource_sends_delivery_status {
  pending
  sent
  delivered
  failed
}

// ClinimetrixPro Tables
model ClinimetrixTemplate {
  id           String   @id
  templateData Json
  version      String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  registryEntry ClinimetrixRegistry?
  assessments   ClinimetrixAssessment[]

  @@map("clinimetrix_templates")
}

model ClinimetrixRegistry {
  id                     String   @id @default(cuid())
  templateId             String   @unique
  abbreviation           String
  name                   String
  category               String
  subcategory            String?
  description            String   @db.Text
  version                String
  language               String
  authors                String   @db.Text
  year                   String
  administrationMode     String
  estimatedDurationMinutes Int
  targetPopulation       Json
  totalItems             Int
  scoreRangeMin          Int
  scoreRangeMax          Int
  psychometricProperties Json?
  clinicalValidation     Json?
  isPublic               Boolean  @default(true)
  isFeatured             Boolean  @default(false)
  tags                   Json?
  lastValidated          DateTime
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relations
  template    ClinimetrixTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  assessments ClinimetrixAssessment[]

  @@index([category])
  @@index([abbreviation])
  @@index([isPublic, isActive])
  @@map("clinimetrix_registry")
}

model ClinimetrixAssessment {
  id               String   @id @default(cuid())
  templateId       String
  patientId        String?
  administratorId  String
  status           ClinimetrixAssessmentStatus @default(pending)
  startedAt        DateTime?
  completedAt      DateTime?
  responses        Json?
  scores           Json?
  interpretation   Json?
  notes            String?  @db.Text
  sessionData      Json?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  template     ClinimetrixTemplate @relation(fields: [templateId], references: [id], map: "clinimetrix_assessments_template_fkey")
  registry     ClinimetrixRegistry @relation(fields: [templateId], references: [templateId], map: "clinimetrix_assessments_registry_fkey")
  patient      Patient?           @relation(fields: [patientId], references: [id], map: "clinimetrix_assessments_patient_fkey")
  administrator User              @relation(fields: [administratorId], references: [id], map: "clinimetrix_assessments_administrator_fkey")

  @@index([templateId])
  @@index([patientId])
  @@index([administratorId])
  @@index([status])
  @@index([createdAt])
  @@map("clinimetrix_assessments")
}

enum ClinimetrixAssessmentStatus {
  pending
  in_progress
  completed
  cancelled
  expired
}

model Organization {
  id                String              @id @default(cuid())
  name              String
  type              OrganizationType    @default(CLINIC)
  maxUsers          Int                 @default(15)
  isActive          Boolean             @default(true)
  isBetaOrg         Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             User[]
  subscriptionPlan  String?             // For future use
  
  @@map("organizations")
}

model AuthSession {
  id            String   @id @default(cuid())
  userId        String
  token         String   @unique
  refreshToken  String?  @unique
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  
  @@index([userId])
  @@index([token])
  @@map("auth_sessions")
}

model BetaRegistration {
  id              String      @id @default(cuid())
  email           String      @unique
  name            String?
  professionalType String?    // psicologo, psiquiatra, clinica
  city            String?
  country         String?
  howDidYouHear   String?     // google, redes_sociales, recomendacion, etc.
  yearsOfPractice String?     // menos_1, 1_3, 4_7, 8_15, mas_15, no_practica
  specialization  String?
  expectations    String?     @db.Text
  registeredAt    DateTime    @default(now())
  inviteCode      String?
  hasJoined       Boolean     @default(false)
  
  @@map("beta_registrations")
}

enum AccountType {
  INDIVIDUAL
  CLINIC
}

enum OrganizationType {
  CLINIC
  HOSPITAL
  CONSULTORIO
}
