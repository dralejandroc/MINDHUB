/**
 * Script para crear plantillas de mensajes predefinidas para evaluaciones remotas
 */

const { PrismaClient } = require('../generated/prisma');
const { createSystemUser } = require('../create-system-user');

const prisma = new PrismaClient();

const messageTemplates = [
  {
    name: 'Seguimiento regular',
    category: 'followup',
    messageTemplate: 'Como parte del seguimiento acordado en su √∫ltima consulta, le solicito complete esta evaluaci√≥n que nos ayudar√° a monitorear su progreso y ajustar su tratamiento de ser necesario.'
  },
  {
    name: 'Pre-cita m√©dica',
    category: 'pre_appointment',
    messageTemplate: 'Para tener mayor informaci√≥n disponible para su pr√≥xima cita, le agradecer√≠a completar esta evaluaci√≥n. Esto nos permitir√° optimizar el tiempo de consulta y brindarle mejor atenci√≥n.'
  },
  {
    name: 'Evaluaci√≥n inicial',
    category: 'initial',
    messageTemplate: 'Como parte de su proceso de evaluaci√≥n inicial, es importante que complete este cuestionario que nos proporcionar√° informaci√≥n valiosa para establecer su plan de tratamiento.'
  },
  {
    name: 'Post-consulta',
    category: 'post_appointment',
    messageTemplate: 'Siguiendo lo acordado en nuestra sesi√≥n de hoy, le env√≠o esta evaluaci√≥n como parte de las evaluaciones pendientes que acordamos para completar su proceso diagn√≥stico.'
  },
  {
    name: 'Monitoreo de s√≠ntomas',
    category: 'followup',
    messageTemplate: 'Como parte del monitoreo continuo de su estado cl√≠nico, le solicito complete esta evaluaci√≥n que nos ayudar√° a evaluar la evoluci√≥n de sus s√≠ntomas.'
  },
  {
    name: 'Evaluaci√≥n de tratamiento',
    category: 'followup',
    messageTemplate: 'Para evaluar la efectividad del tratamiento que est√° recibiendo, es importante que complete esta evaluaci√≥n que nos permitir√° hacer los ajustes necesarios.'
  }
];

async function createTemplates() {
  try {
    console.log('üöÄ Creando plantillas de mensajes para evaluaciones remotas...');
    
    // Obtener o crear usuario del sistema
    const systemUserId = await createSystemUser();
    console.log(`‚úÖ Usuario del sistema: ${systemUserId}`);
    
    // Verificar si ya existen plantillas
    const existingTemplates = await prisma.remoteAssessmentMessageTemplate.count();
    
    if (existingTemplates > 0) {
      console.log(`‚ö†Ô∏è  Ya existen ${existingTemplates} plantillas. Omitiendo creaci√≥n.`);
      return;
    }
    
    // Crear plantillas
    const results = await Promise.all(
      messageTemplates.map(template => 
        prisma.remoteAssessmentMessageTemplate.create({
          data: {
            ...template,
            createdBy: systemUserId,
            isActive: true
          }
        })
      )
    );
    
    console.log(`‚úÖ ${results.length} plantillas de mensajes creadas exitosamente:`);
    results.forEach((template, index) => {
      console.log(`   ${index + 1}. ${template.name} (${template.category})`);
    });
    
    console.log('\nüìã Plantillas disponibles:');
    console.log('- Seguimiento regular');
    console.log('- Pre-cita m√©dica');
    console.log('- Evaluaci√≥n inicial');  
    console.log('- Post-consulta');
    console.log('- Monitoreo de s√≠ntomas');
    console.log('- Evaluaci√≥n de tratamiento');
    
  } catch (error) {
    console.error('‚ùå Error creando plantillas:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar script si se llama directamente
if (require.main === module) {
  createTemplates()
    .then(() => {
      console.log('\n‚úÖ Script completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Error ejecutando script:', error);
      process.exit(1);
    });
}

module.exports = { createTemplates };