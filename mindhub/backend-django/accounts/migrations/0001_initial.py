# Generated by Django 5.2.5 on 2025-08-13 02:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('user_type', models.CharField(choices=[('admin', 'Administrador'), ('clinician', 'Clínico'), ('evaluator', 'Evaluador'), ('researcher', 'Investigador')], default='clinician', max_length=20, verbose_name='Tipo de usuario')),
                ('specialization', models.CharField(blank=True, choices=[('psychology', 'Psicología'), ('psychiatry', 'Psiquiatría'), ('neurology', 'Neurología'), ('geriatrics', 'Geriatría'), ('pediatrics', 'Pediatría'), ('other', 'Otra')], max_length=20, verbose_name='Especialización')),
                ('professional_license', models.CharField(blank=True, max_length=50, verbose_name='Cédula profesional')),
                ('institution', models.CharField(blank=True, max_length=200, verbose_name='Institución')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Teléfono')),
                ('bio', models.TextField(blank=True, verbose_name='Biografía profesional')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('preferred_language', models.CharField(choices=[('es', 'Español'), ('en', 'English')], default='es', max_length=5, verbose_name='Idioma preferido')),
                ('timezone', models.CharField(default='America/Mexico_City', max_length=50, verbose_name='Zona horaria')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verificado profesionalmente')),
                ('can_create_assessments', models.BooleanField(default=True, verbose_name='Puede crear evaluaciones')),
                ('can_view_all_results', models.BooleanField(default=False, verbose_name='Puede ver todos los resultados')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'clinimetrix_users',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
