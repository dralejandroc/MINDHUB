# Generated by Django 4.2.11 on 2025-09-13 07:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('psychometric_scales', '0003_alter_psychometricscale_options'),
        ('assessments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('template_id', models.CharField(blank=True, help_text='Template ID from clinimetrix_templates table', max_length=50, null=True)),
                ('patient_id', models.UUIDField(blank=True, db_column='patient_id', help_text='Patient UUID', null=True)),
                ('administrator_id', models.UUIDField(blank=True, db_column='administrator_id', help_text='UUID of the user who created this assessment', null=True)),
                ('consultation_id', models.UUIDField(blank=True, help_text='Related consultation if applicable', null=True)),
                ('clinic_id', models.BooleanField(default=False, help_text='true = clinic assessment, false = individual assessment')),
                ('user_id', models.UUIDField(blank=True, help_text='Owner UUID of the assessment', null=True)),
                ('mode', models.CharField(blank=True, choices=[('self', 'Autoaplicada'), ('interviewer', 'Heteroaplicada'), ('mixed', 'Mixta')], default='self', max_length=20, null=True)),
                ('status', models.CharField(blank=True, choices=[('not_started', 'No iniciada'), ('in_progress', 'En progreso'), ('completed', 'Completada'), ('cancelled', 'Cancelada'), ('expired', 'Expirada')], default='not_started', max_length=20, null=True)),
                ('responses', models.JSONField(blank=True, default=dict, null=True)),
                ('scores', models.JSONField(blank=True, default=dict, null=True)),
                ('interpretation', models.JSONField(blank=True, default=dict, null=True)),
                ('subscale_scores', models.JSONField(blank=True, default=dict, null=True)),
                ('validity_indicators', models.JSONField(blank=True, default=dict, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('total_score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('severity_level', models.CharField(blank=True, max_length=50, null=True)),
                ('current_step', models.IntegerField(blank=True, db_column='current_step', null=True)),
                ('completion_time_seconds', models.IntegerField(blank=True, null=True)),
                ('percentile', models.IntegerField(blank=True, null=True)),
                ('completion_percentage', models.IntegerField(blank=True, null=True)),
                ('time_taken_minutes', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('clinical_notes', models.TextField(blank=True, null=True)),
                ('observations', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assessment_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Evaluación',
                'verbose_name_plural': 'Evaluaciones',
                'db_table': 'clinimetrix_assessments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type', models.CharField(choices=[('scheduled', 'Evaluación programada'), ('followup', 'Seguimiento'), ('overdue', 'Vencida'), ('consultation', 'Próxima consulta')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('due_date', models.DateField()),
                ('reminder_date', models.DateField()),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('sent', 'Enviado'), ('completed', 'Completado'), ('dismissed', 'Descartado')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Recordatorio',
                'verbose_name_plural': 'Recordatorios',
                'db_table': 'clinimetrix_reminders',
                'ordering': ['reminder_date', 'due_date'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_number', models.PositiveIntegerField()),
                ('section_id', models.CharField(blank=True, max_length=50)),
                ('response_value', models.IntegerField()),
                ('response_label', models.CharField(max_length=200)),
                ('raw_score', models.FloatField(blank=True, null=True)),
                ('response_time_seconds', models.FloatField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_skipped', models.BooleanField(default=False)),
                ('is_changed', models.BooleanField(default=False)),
                ('change_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Respuesta de evaluación',
                'verbose_name_plural': 'Respuestas de evaluación',
                'db_table': 'clinimetrix_responses',
                'ordering': ['assessment', 'item_number'],
            },
        ),
        migrations.CreateModel(
            name='ClinicalReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('clinical_complete', 'Informe Clínico Completo'), ('clinical_summary', 'Resumen Clínico'), ('evolution', 'Informe de Evolución'), ('consultation', 'Informe de Interconsulta'), ('research', 'Informe de Investigación')], default='clinical_complete', max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('generated_for', models.CharField(blank=True, max_length=200)),
                ('institution', models.CharField(blank=True, max_length=200)),
                ('content_html', models.TextField()),
                ('content_pdf', models.FileField(blank=True, null=True, upload_to='reports/')),
                ('include_raw_data', models.BooleanField(default=False)),
                ('include_graphs', models.BooleanField(default=True)),
                ('include_recommendations', models.BooleanField(default=True)),
                ('include_interpretation', models.BooleanField(default=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('template_version', models.CharField(default='1.0', max_length=20)),
                ('is_confidential', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Reporte clínico',
                'verbose_name_plural': 'Reportes clínicos',
                'db_table': 'clinimetrix_reports',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='Consultation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consultation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('consultation_type', models.CharField(max_length=50)),
                ('chief_complaint', models.TextField(blank=True)),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment_plan', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assessments_consultations',
                'ordering': ['-consultation_date'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('medical_record', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino'), ('O', 'Otro'), ('N', 'Prefiero no decir')], max_length=1)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('diagnosis', models.TextField(blank=True)),
                ('medications', models.TextField(blank=True)),
                ('medical_history', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_by_id', models.UUIDField(blank=True, null=True)),
                ('assigned_clinician_id', models.UUIDField(blank=True, null=True)),
                ('consent_given', models.BooleanField(default=False)),
                ('consent_date', models.DateTimeField(blank=True, null=True)),
                ('data_retention_until', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': 'Pacientes',
                'db_table': 'patients',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='SecondaryDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('device_type', models.CharField(default='tablet', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('session_token', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('session_expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('current_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secondary_device', to='assessments.assessment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secondary_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dispositivo secundario',
                'verbose_name_plural': 'Dispositivos secundarios',
                'db_table': 'clinimetrix_secondary_devices',
                'ordering': ['-last_used_at', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ScoringResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.FloatField()),
                ('total_score_raw', models.FloatField(blank=True, null=True)),
                ('subscale_scores', models.JSONField(default=dict)),
                ('interpretation_label', models.CharField(blank=True, max_length=200)),
                ('severity_level', models.CharField(blank=True, max_length=50)),
                ('severity_color', models.CharField(blank=True, max_length=7)),
                ('clinical_interpretation', models.TextField(blank=True)),
                ('professional_recommendations', models.JSONField(blank=True, null=True)),
                ('percentile', models.FloatField(blank=True, null=True)),
                ('z_score', models.FloatField(blank=True, null=True)),
                ('t_score', models.FloatField(blank=True, null=True)),
                ('reliability_alpha', models.FloatField(blank=True, null=True)),
                ('sem_value', models.FloatField(blank=True, null=True)),
                ('response_bias_detected', models.JSONField(blank=True, null=True)),
                ('response_consistency', models.FloatField(blank=True, null=True)),
                ('scoring_algorithm_version', models.CharField(default='1.0', max_length=20)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('validation_notes', models.TextField(blank=True)),
                ('assessment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='scoring_result', to='assessments.assessment')),
                ('computed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resultado de puntuación',
                'verbose_name_plural': 'Resultados de puntuación',
                'db_table': 'clinimetrix_scoring_results',
            },
        ),
        migrations.CreateModel(
            name='ScheduledAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('frequency', models.CharField(choices=[('weekly', 'Semanal'), ('biweekly', 'Quincenal'), ('monthly', 'Mensual'), ('quarterly', 'Trimestral'), ('custom', 'Personalizado')], max_length=20)),
                ('frequency_days', models.PositiveIntegerField(blank=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('next_due_date', models.DateField()),
                ('next_consultation_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Activo'), ('paused', 'Pausado'), ('completed', 'Completado'), ('cancelled', 'Cancelado')], default='active', max_length=20)),
                ('total_completed', models.PositiveIntegerField(default=0)),
                ('send_remote_link', models.BooleanField(default=True)),
                ('reminder_days_before', models.PositiveIntegerField(default=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_assessments', to='assessments.patient')),
                ('scale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='psychometric_scales.psychometricscale')),
            ],
            options={
                'verbose_name': 'Evaluación programada',
                'verbose_name_plural': 'Evaluaciones programadas',
                'db_table': 'clinimetrix_scheduled_assessments',
                'ordering': ['next_due_date', 'patient__last_name'],
            },
        ),
        migrations.CreateModel(
            name='RemoteAssessmentLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=64, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('max_uses', models.PositiveIntegerField(default=1)),
                ('uses_count', models.PositiveIntegerField(default=0)),
                ('clinical_context', models.TextField(blank=True)),
                ('instructions', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.assessment')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='remote_links', to='assessments.patient')),
                ('scale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='psychometric_scales.psychometricscale')),
            ],
            options={
                'verbose_name': 'Enlace de evaluación remota',
                'verbose_name_plural': 'Enlaces de evaluación remota',
                'db_table': 'clinimetrix_remote_links',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('payment_method', models.CharField(max_length=50)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consultation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='assessments.consultation')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='assessments.patient')),
            ],
            options={
                'db_table': 'assessments_payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['medical_record'], name='patients_medical_b16a76_idx'),
        ),
        migrations.AddField(
            model_name='consultation',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='assessments.patient'),
        ),
        migrations.AddField(
            model_name='clinicalreport',
            name='assessment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='assessments.assessment'),
        ),
        migrations.AddField(
            model_name='clinicalreport',
            name='generated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='clinicalreport',
            name='shared_with',
            field=models.ManyToManyField(blank=True, related_name='shared_reports', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessmentresponse',
            name='assessment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_items', to='assessments.assessment'),
        ),
        migrations.AddField(
            model_name='assessmentreminder',
            name='assigned_to',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_reminders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessmentreminder',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='assessments.patient'),
        ),
        migrations.AddField(
            model_name='assessmentreminder',
            name='scheduled_assessment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='assessments.scheduledassessment'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['patient_id'], name='clinimetrix_patient_68f8b7_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['template_id'], name='clinimetrix_templat_c8af58_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['status'], name='clinimetrix_status_efbfaa_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['administrator_id'], name='clinimetrix_adminis_42825f_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['clinic_id'], name='clinimetrix_clinic__1977ae_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['user_id'], name='clinimetrix_user_id_2bb32a_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledassessment',
            index=models.Index(fields=['status', 'next_due_date'], name='clinimetrix_status_471961_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledassessment',
            index=models.Index(fields=['patient', 'status'], name='clinimetrix_patient_247a94_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledassessment',
            index=models.Index(fields=['created_by', 'status'], name='clinimetrix_created_369b61_idx'),
        ),
        migrations.AddIndex(
            model_name='remoteassessmentlink',
            index=models.Index(fields=['token'], name='clinimetrix_token_9fef1e_idx'),
        ),
        migrations.AddIndex(
            model_name='remoteassessmentlink',
            index=models.Index(fields=['patient', 'is_active'], name='clinimetrix_patient_6b9782_idx'),
        ),
        migrations.AddIndex(
            model_name='remoteassessmentlink',
            index=models.Index(fields=['expires_at'], name='clinimetrix_expires_8bbb93_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assessmentresponse',
            unique_together={('assessment', 'item_number')},
        ),
        migrations.AddIndex(
            model_name='assessmentreminder',
            index=models.Index(fields=['status', 'reminder_date'], name='clinimetrix_status_467a4c_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentreminder',
            index=models.Index(fields=['assigned_to', 'status'], name='clinimetrix_assigne_c71690_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentreminder',
            index=models.Index(fields=['patient', 'status'], name='clinimetrix_patient_fa4894_idx'),
        ),
    ]
