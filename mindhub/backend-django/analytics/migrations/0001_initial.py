# Generated by Django 4.2.11 on 2025-09-13 07:15

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicalProtocolEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consultation_id', models.UUIDField(verbose_name='ID Consulta')),
                ('patient_id', models.UUIDField(verbose_name='ID Paciente')),
                ('diagnosis_code', models.CharField(max_length=20, verbose_name='Código Diagnóstico')),
                ('treatment_plan', models.JSONField(default=dict, verbose_name='Plan de Tratamiento')),
                ('medication_changes', models.JSONField(default=dict, verbose_name='Cambios en Medicación')),
                ('patient_improvement', models.CharField(choices=[('improved', 'Mejorado'), ('stable', 'Estable'), ('worsened', 'Empeorado'), ('unknown', 'Desconocido')], default='unknown', max_length=20)),
                ('protocol_compliance', models.BooleanField(default=True, verbose_name='Cumplimiento de Protocolo')),
                ('deviation_reason', models.TextField(blank=True, null=True, verbose_name='Razón de Desviación')),
                ('evaluated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Evaluación de Protocolo Clínico',
                'verbose_name_plural': 'Evaluaciones de Protocolos Clínicos',
                'ordering': ['-evaluated_at'],
            },
        ),
        migrations.CreateModel(
            name='IndicatorDefinition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nombre del Indicador')),
                ('objective', models.TextField(verbose_name='Objetivo del Indicador')),
                ('formula', models.TextField(verbose_name='Fórmula de Cálculo')),
                ('data_source', models.CharField(max_length=300, verbose_name='Fuente de Datos')),
                ('frequency', models.CharField(choices=[('daily', 'Diario'), ('weekly', 'Semanal'), ('monthly', 'Mensual'), ('quarterly', 'Trimestral'), ('yearly', 'Anual')], default='monthly', max_length=20)),
                ('target_value', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Meta')),
                ('indicator_type', models.CharField(choices=[('performance', 'Desempeño'), ('result', 'Resultado'), ('process', 'Proceso'), ('volume', 'Volumen'), ('management', 'Gestión')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('applies_to', models.CharField(choices=[('individual', 'Usuario Individual'), ('clinic', 'Clínica'), ('both', 'Ambos')], default='both', max_length=20)),
                ('category', models.CharField(max_length=100, verbose_name='Categoría')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Definición de Indicador',
                'verbose_name_plural': 'Definiciones de Indicadores',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PatientClassification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('patient_id', models.UUIDField(unique=True, verbose_name='ID Paciente')),
                ('classification', models.CharField(choices=[('P_INCONSTANTE', 'P. Inconstante'), ('P_EN_ACOMPAÑAMIENTO', 'P. en Acompañamiento'), ('INTEGRACION_INICIAL', 'Integración Inicial'), ('P_INTEGRACION_AVANZADA', 'P. Integración Avanzada'), ('P_INTEGRADO', 'P. Integrado'), ('ARRAIGADO', 'Arraigado'), ('P_DE_ALTA', 'P. de Alta')], max_length=30)),
                ('attendance_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('professionals_seen', models.IntegerField(default=0, verbose_name='Profesionales Consultados')),
                ('treatment_adherence', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('time_in_treatment', models.IntegerField(default=0, verbose_name='Días en Tratamiento')),
                ('additional_programs', models.IntegerField(default=0, verbose_name='Programas Adicionales')),
                ('last_evaluation', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Clasificación de Paciente',
                'verbose_name_plural': 'Clasificaciones de Pacientes',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionRefill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('patient_id', models.UUIDField(verbose_name='ID Paciente')),
                ('prescription_id', models.UUIDField(verbose_name='ID Prescripción')),
                ('refill_date', models.DateField(default=django.utils.timezone.now)),
                ('refill_type', models.CharField(choices=[('in_person', 'Presencial'), ('whatsapp', 'WhatsApp'), ('phone', 'Teléfono'), ('email', 'Email'), ('remote', 'Remoto')], max_length=20)),
                ('is_controlled_medication', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, verbose_name='Notas')),
                ('created_by', models.UUIDField(verbose_name='Creado por')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Resurtido de Receta',
                'verbose_name_plural': 'Resurtidos de Recetas',
                'ordering': ['-refill_date'],
            },
        ),
        migrations.CreateModel(
            name='SatisfactionSurvey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('patient_id', models.UUIDField(verbose_name='ID Paciente')),
                ('appointment_id', models.UUIDField(blank=True, null=True, verbose_name='ID Cita')),
                ('survey_type', models.CharField(choices=[('medical_attention', 'Atención Médica'), ('global', 'Satisfacción Global'), ('customer_service', 'Atención al Cliente')], max_length=30)),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('feedback', models.TextField(blank=True, verbose_name='Comentarios')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Encuesta de Satisfacción',
                'verbose_name_plural': 'Encuestas de Satisfacción',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IndicatorSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('clinic_id', models.BooleanField(default=False, verbose_name='Compartido en Clínica')),
                ('user_id', models.UUIDField(blank=True, null=True, verbose_name='ID Usuario')),
                ('enabled_indicators', models.JSONField(default=list, verbose_name='Indicadores Habilitados')),
                ('custom_targets', models.JSONField(default=dict, verbose_name='Metas Personalizadas')),
                ('notification_preferences', models.JSONField(default=dict, verbose_name='Preferencias de Notificación')),
                ('dashboard_layout', models.JSONField(default=dict, verbose_name='Layout del Dashboard')),
                ('clinical_guidelines', models.JSONField(default=dict, verbose_name='Guías Clínicas Personalizadas')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Configuración de Indicadores',
                'verbose_name_plural': 'Configuraciones de Indicadores',
                'unique_together': {('clinic_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='IndicatorValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('clinic_id', models.BooleanField(default=False, verbose_name='Compartido en Clínica')),
                ('user_id', models.UUIDField(blank=True, null=True, verbose_name='ID Usuario')),
                ('period_start', models.DateField(verbose_name='Inicio del Período')),
                ('period_end', models.DateField(verbose_name='Fin del Período')),
                ('calculated_value', models.FloatField(verbose_name='Valor Calculado')),
                ('raw_data', models.JSONField(default=dict, verbose_name='Datos Raw')),
                ('status', models.CharField(choices=[('calculated', 'Calculado'), ('pending', 'Pendiente'), ('error', 'Error')], default='pending', max_length=20)),
                ('calculated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='analytics.indicatordefinition')),
            ],
            options={
                'verbose_name': 'Valor de Indicador',
                'verbose_name_plural': 'Valores de Indicadores',
                'ordering': ['-period_start', 'indicator__name'],
                'unique_together': {('indicator', 'clinic_id', 'user_id', 'period_start', 'period_end')},
            },
        ),
    ]
