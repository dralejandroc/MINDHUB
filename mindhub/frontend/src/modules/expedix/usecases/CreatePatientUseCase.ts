/**
 * CreatePatientUseCase
 * Application business rules for creating new patients
 */

import { Patient } from '../entities/Patient';
import { PatientRepository, CreatePatientData } from '../repositories/PatientRepository';

export interface CreatePatientRequest {
  firstName: string;
  lastName?: string;
  paternalLastName?: string;
  maternalLastName?: string;
  dateOfBirth?: Date;
  gender?: string;
  email?: string;
  phone?: string;
  address?: string;
  city?: string;
  state?: string;
  postalCode?: string;
  country?: string;
  curp?: string;
  rfc?: string;
  bloodType?: string;
  allergies?: string[];
  chronicConditions?: string[];
  currentMedications?: string[];
  emergencyContactName?: string;
  emergencyContactPhone?: string;
  emergencyContactRelationship?: string;
  consentToTreatment: boolean;
  consentToDataProcessing: boolean;
  patientCategory?: string;
  assignedProfessionalId?: string;
  notes?: string;
  tags?: string[];
  maritalStatus?: string;
  occupation?: string;
  educationLevel?: string;
  insuranceProvider?: string;
  insuranceNumber?: string;
  clinicId?: string;
  workspaceId?: string;
}

export class CreatePatientUseCase {
  constructor(
    private patientRepository: PatientRepository
  ) {}

  /**
   * Execute the use case
   */
  async execute(request: CreatePatientRequest): Promise<Patient> {
    // Business rule: Validate required fields
    this.validateRequiredFields(request);

    // Business rule: Validate tenant context
    this.validateTenantContext(request.clinicId, request.workspaceId);

    // Business rule: Validate consents (both required)
    this.validateConsents(request);

    // Business rule: Validate email uniqueness if provided
    if (request.email) {
      await this.validateEmailUniqueness(request.email);
    }

    // Business rule: Validate medical record number will be unique
    // (Generated by system, but we validate the generation process)
    const medicalRecordNumber = await this.generateMedicalRecordNumber(
      request.clinicId,
      request.workspaceId
    );

    // Business rule: Validate age constraints
    this.validateAgeConstraints(request.dateOfBirth);

    // Business rule: Validate CURP if provided (Mexican system)
    this.validateCURP(request.curp);

    // Business rule: Clean and validate phone number
    const cleanedPhone = this.cleanPhoneNumber(request.phone);

    // Business rule: Auto-assign patient category based on context
    const patientCategory = this.determinePatientCategory(request);

    // Create patient data with business rules applied
    const patientData: CreatePatientData = {
      ...request,
      phone: cleanedPhone,
      patientCategory,
      // Default values
      country: request.country || 'Mexico',
      allergies: request.allergies || [],
      chronicConditions: request.chronicConditions || [],
      currentMedications: request.currentMedications || [],
      tags: request.tags || []
    };

    // Create patient through repository
    const patient = await this.patientRepository.create(patientData);

    // Business rule: Log patient creation for audit
    // TODO: Integrate with audit service
    console.log(`Patient created: ${patient.id} - ${patient.getDisplayName()}`);

    return patient;
  }

  /**
   * Business rule: Validate required fields
   */
  private validateRequiredFields(request: CreatePatientRequest): void {
    if (!request.firstName?.trim()) {
      throw new Error('First name is required');
    }

    if (!request.consentToTreatment || !request.consentToDataProcessing) {
      throw new Error('Both treatment and data processing consent are required');
    }
  }

  /**
   * Business rule: Validate tenant context
   */
  private validateTenantContext(clinicId?: string, workspaceId?: string): void {
    if (!clinicId && !workspaceId) {
      throw new Error('Patient must belong to either a clinic or workspace');
    }

    if (clinicId && workspaceId) {
      throw new Error('Patient cannot belong to both clinic and workspace');
    }
  }

  /**
   * Business rule: Validate consents
   */
  private validateConsents(request: CreatePatientRequest): void {
    if (!request.consentToTreatment) {
      throw new Error('Treatment consent is required by law');
    }

    if (!request.consentToDataProcessing) {
      throw new Error('Data processing consent is required for GDPR compliance');
    }
  }

  /**
   * Business rule: Validate email uniqueness
   */
  private async validateEmailUniqueness(email: string): Promise<void> {
    const isUnique = await this.patientRepository.validateEmail(email);
    if (!isUnique) {
      throw new Error('Email already exists in the system');
    }
  }

  /**
   * Business rule: Generate unique medical record number
   */
  private async generateMedicalRecordNumber(
    clinicId?: string,
    workspaceId?: string
  ): Promise<string> {
    // Business rule: Format depends on tenant type
    const prefix = clinicId ? `CLI-${clinicId.slice(0, 4).toUpperCase()}` : `WS-${workspaceId?.slice(0, 4).toUpperCase()}`;
    const timestamp = Date.now().toString().slice(-6);
    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
    
    const recordNumber = `${prefix}-${timestamp}-${random}`;

    // Ensure uniqueness
    const isUnique = await this.patientRepository.validateMedicalRecordNumber(recordNumber);
    if (!isUnique) {
      // Retry with different random number
      return this.generateMedicalRecordNumber(clinicId, workspaceId);
    }

    return recordNumber;
  }

  /**
   * Business rule: Validate age constraints
   */
  private validateAgeConstraints(dateOfBirth?: Date): void {
    if (!dateOfBirth) return;

    const today = new Date();
    const age = today.getFullYear() - dateOfBirth.getFullYear();
    const monthDiff = today.getMonth() - dateOfBirth.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dateOfBirth.getDate())) {
      // age--;
    }

    // Business rule: Cannot be born in the future
    if (dateOfBirth > today) {
      throw new Error('Date of birth cannot be in the future');
    }

    // Business rule: Reasonable age limits
    if (age > 150) {
      throw new Error('Invalid date of birth: age cannot exceed 150 years');
    }

    // Business rule: Minimum age for independent consent (varies by jurisdiction)
    // For medical records, we allow all ages but flag minors
  }

  /**
   * Business rule: Validate CURP for Mexican patients
   */
  private validateCURP(curp?: string): void {
    if (!curp) return;

    const curpRegex = /^[A-Z]{4}\d{6}[HM][A-Z]{5}[A-Z0-9]\d$/;
    if (!curpRegex.test(curp.toUpperCase())) {
      throw new Error('Invalid CURP format');
    }
  }

  /**
   * Business rule: Clean and validate phone number
   */
  private cleanPhoneNumber(phone?: string): string | undefined {
    if (!phone) return undefined;

    // Remove all non-numeric characters
    const cleaned = phone.replace(/\D/g, '');

    // Business rule: Mexican phone numbers should be 10 digits
    if (cleaned.length === 10) {
      return `+52${cleaned}`; // Add Mexico country code
    }

    // Business rule: International format
    if (cleaned.length >= 7 && cleaned.length <= 15) {
      return `+${cleaned}`;
    }

    throw new Error('Invalid phone number format');
  }

  /**
   * Business rule: Determine patient category based on context
   */
  private determinePatientCategory(request: CreatePatientRequest): string {
    // If explicitly provided, use it
    if (request.patientCategory) {
      return request.patientCategory;
    }

    // Business rule: Default to first-time patient
    return 'primera_vez';
  }
}