// =====================================================================
// MINDHUB CLEAN PRISMA SCHEMA - POSTGRESQL ÚNICO
// ELIMINA TODO LEGACY - SISTEMA CONSISTENTE Y ÚNICO
// =====================================================================

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================================
// USUARIOS Y AUTENTICACIÓN (CLERK ÚNICAMENTE)
// =====================================================================

model users {
  id             String   @id @default(uuid()) @db.Uuid
  clerkUserId    String   @unique
  email          String   @unique
  firstName      String?
  lastName       String?
  role           String   @default("professional")
  organization   String?
  licenseNumber  String?
  specialization String?
  isActive       Boolean  @default(true)
  emailVerified  Boolean  @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  patientsCreated            patients[]                      @relation("PatientCreatedBy")
  consultations              consultations[]                 @relation("ConsultationBy")
  clinimetrixAssessments     clinimetrix_assessments[]       @relation("AssessmentAdministrator")
  clinimetrixRemoteAssessments clinimetrix_remote_assessments[] @relation("RemoteAssessmentSentBy")
  formTemplatesCreated       form_templates[]                @relation("TemplateCreatedBy")
  patientFormAssignments     patient_form_assignments[]      @relation("FormAssignedBy")

  @@index([clerkUserId])
  @@index([email])
  @@index([isActive])
}

// =====================================================================
// EXPEDIX - GESTIÓN DE PACIENTES (ÚNICO)
// =====================================================================

model patients {
  id                           String   @id @default(uuid()) @db.Uuid
  firstName                    String
  lastName                     String?
  paternalLastName             String?
  maternalLastName             String?
  email                        String   @unique
  phone                        String?
  dateOfBirth                  DateTime? @db.Date
  gender                       String?
  address                      String?
  city                         String?
  state                        String?
  zipCode                      String?
  country                      String   @default("México")
  emergencyContactName         String?
  emergencyContactPhone        String?
  emergencyContactRelationship String?
  insuranceProvider            String?
  insuranceNumber              String?
  allergies                    String?
  currentMedications           String?
  chronicConditions            String?
  notes                        String?
  isActive                     Boolean  @default(true)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  createdBy                    String   @db.Uuid

  // Relaciones
  creator                      users                           @relation("PatientCreatedBy", fields: [createdBy], references: [id])
  medicalHistory               medical_history[]
  consultations                consultations[]
  clinimetrixAssessments       clinimetrix_assessments[]
  clinimetrixRemoteAssessments clinimetrix_remote_assessments[]
  patientFormAssignments       patient_form_assignments[]

  @@index([email])
  @@index([isActive])
  @@index([createdAt])
  @@index([createdBy])
}

model medical_history {
  id            String    @id @default(uuid()) @db.Uuid
  patientId     String    @db.Uuid
  condition     String
  diagnosisDate DateTime? @db.Date
  severity      String?
  status        String    @default("active")
  notes         String?
  diagnosedBy   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  patient patients @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([status])
}

model consultations {
  id                     String    @id @default(uuid()) @db.Uuid
  patientId              String    @db.Uuid
  consultationDate       DateTime
  consultationType       String?
  chiefComplaint         String?
  currentIllnessHistory  String?
  physicalExamination    String?
  assessment             String?
  plan                   String?
  followUpInstructions   String?
  nextAppointment        DateTime?
  status                 String    @default("completed")
  consultedBy            String?   @db.Uuid
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relaciones
  patient              patients                    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  consultant           users?                      @relation("ConsultationBy", fields: [consultedBy], references: [id])
  clinimetrixAssessments clinimetrix_assessments[]

  @@index([patientId])
  @@index([consultationDate])
  @@index([consultedBy])
  @@index([status])
}

// =====================================================================
// CLINIMETRIX PRO - EVALUACIONES CLÍNICAS (ÚNICO)
// =====================================================================

model clinimetrix_registry {
  id                     String    @id
  templateId             String    @unique
  abbreviation           String
  name                   String
  category               String
  subcategory            String?
  description            String?
  version                String
  language               String    @default("es")
  authors                Json?
  year                   Int?
  administrationMode     String?
  estimatedDurationMinutes Int?
  targetPopulation       Json?
  totalItems             Int?
  scoreRangeMin          Int?
  scoreRangeMax          Int?
  psychometricProperties Json?
  clinicalValidation     Json?
  isPublic               Boolean   @default(true)
  isFeatured             Boolean   @default(false)
  tags                   Json?
  lastValidated          DateTime?
  isActive               Boolean   @default(true)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relaciones
  template clinimetrix_templates @relation(fields: [templateId], references: [id])

  @@index([category])
  @@index([isActive])
  @@index([isFeatured])
}

model clinimetrix_templates {
  id           String   @id
  templateData Json
  version      String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  registry                   clinimetrix_registry?           @relation
  assessments                clinimetrix_assessments[]
  remoteAssessments          clinimetrix_remote_assessments[]

  @@index([isActive])
  @@index([version])
}

model clinimetrix_assessments {
  id              String    @id @default(uuid()) @db.Uuid
  templateId      String
  patientId       String    @db.Uuid
  consultationId  String?   @db.Uuid
  administratorId String?   @db.Uuid
  responses       Json?
  scores          Json?
  interpretation  Json?
  status          String    @default("draft")
  startedAt       DateTime?
  completedAt     DateTime?
  validityFlags   Json?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relaciones
  template     clinimetrix_templates @relation(fields: [templateId], references: [id])
  patient      patients              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  consultation consultations?        @relation(fields: [consultationId], references: [id])
  administrator users?               @relation("AssessmentAdministrator", fields: [administratorId], references: [id])

  @@index([templateId])
  @@index([patientId])
  @@index([status])
  @@index([createdAt])
}

model clinimetrix_remote_assessments {
  id            String    @id @default(uuid()) @db.Uuid
  templateId    String
  patientId     String    @db.Uuid
  sentBy        String?   @db.Uuid
  accessToken   String    @unique
  patientEmail  String
  expiresAt     DateTime
  responses     Json?
  scores        Json?
  interpretation Json?
  status        String    @default("pending")
  accessedAt    DateTime?
  completedAt   DateTime?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  template clinimetrix_templates @relation(fields: [templateId], references: [id])
  patient  patients              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  sender   users?                @relation("RemoteAssessmentSentBy", fields: [sentBy], references: [id])

  @@index([templateId])
  @@index([patientId])
  @@index([accessToken])
  @@index([status])
  @@index([expiresAt])
}

// =====================================================================
// FORMX - FORMULARIOS DINÁMICOS (ÚNICO)
// =====================================================================

model form_templates {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  description       String?
  formType          String
  category          String?
  structure         Json
  settings          Json?
  expedixMapping    Json?
  autoSyncExpedix   Boolean  @default(false)
  requiresAuth      Boolean  @default(false)
  isActive          Boolean  @default(true)
  version           String   @default("1.0")
  createdBy         String?  @db.Uuid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  creator            users?                     @relation("TemplateCreatedBy", fields: [createdBy], references: [id])
  patientAssignments patient_form_assignments[]

  @@index([formType])
  @@index([category])
  @@index([isActive])
  @@index([createdAt])
}

model patient_form_assignments {
  id             String    @id @default(uuid()) @db.Uuid
  templateId     String    @db.Uuid
  patientId      String    @db.Uuid
  assignedBy     String?   @db.Uuid
  accessToken    String    @unique
  patientEmail   String
  expiresAt      DateTime
  formData       Json?
  status         String    @default("pending")
  submittedAt    DateTime?
  syncedToExpedix Boolean   @default(false)
  syncedAt       DateTime?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relaciones
  template   form_templates @relation(fields: [templateId], references: [id])
  patient    patients       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  assigner   users?         @relation("FormAssignedBy", fields: [assignedBy], references: [id])

  @@index([templateId])
  @@index([patientId])
  @@index([accessToken])
  @@index([status])
  @@index([expiresAt])
}

// =====================================================================
// CONFIGURACIONES GLOBALES
// =====================================================================

model clinic_configurations {
  id               String   @id @default(uuid()) @db.Uuid
  organizationName String
  address          String?
  phone            String?
  email            String?
  logo             String?
  timezone         String   @default("America/Mexico_City")
  language         String   @default("es")
  currency         String   @default("MXN")
  settings         Json?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([isActive])
}